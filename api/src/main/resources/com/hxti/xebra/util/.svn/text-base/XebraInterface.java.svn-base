package com.hxti.xebra.util;

import java.sql.SQLException;
import java.util.Date;

import org.apache.log4j.Logger;
import org.openmrs.module.radiology.StringUtils;

import com.hxti.edge.pacs.data.AEPeer;
import com.hxti.edge.pacs.data.ServiceClassProvider;
import com.hxti.edge.pacs.exception.PersistException;
import com.hxti.edge.pacs.persist.LoaderFactory;
import com.hxti.edge.pacs.util.sql.SqlClientContainer;

/**
 * Saves entries in Xebra tables: radiology_instances, radiology_series,
 * radiology_studies.<br/>
 * TODO radiology_studies is pending to be merged and compacted with
 * radiology_study.
 * 
 * @author jdp
 * 
 */
public class XebraInterface
{
	private static Logger log=Logger.getLogger(XebraInterface.class);



	@SuppressWarnings("unused")
	private static void debug(String message)
	{
		if(log.isDebugEnabled()) log.debug(message);
	}



	public void saveSCP(String aeTitle,String archiveDirectory,int port,
	      String tmpDirectory) throws SQLException
	{
		ServiceClassProvider scp=new ServiceClassProvider();
		scp.setAETitle(aeTitle);
		scp.setArchiveDirectory(archiveDirectory);
		scp.setPort(port);
		scp.setTmpDirectory(tmpDirectory);
		scp.setAgentId(1);
		scp.setLogFilePath(StringUtils.path(tmpDirectory,"log"));
		scp.setLogLevel("INFO");
		scp.setThumbnailHeight(300);
		scp.setThumbnailWidth(300);
		scp.setThumbnailQuality(0.1f);
		Object loadedScp=SqlClientContainer.sql.queryForObject("scpByAETitle",
		      aeTitle);
		if(loadedScp==null)
		{
			SqlClientContainer.sql.insert("insertSCP",scp);
		}
		else
		{
			SqlClientContainer.sql.update("persistSCP",scp);
		}
	}



	public void saveAE(String host,int port,String scpAETitle)
	      throws SQLException
	{
		AEPeer ae=new AEPeer();
		ae.setHost(host);
		ae.setPort(port);
		ae.setLocalName(scpAETitle);
		ae.setScpAETitle(scpAETitle);
		ae.setFindAETitle(scpAETitle);
		ae.setMoveAETitle(scpAETitle);
		ae.setStoreAETitle(scpAETitle);
		ae.setRespAETitle(scpAETitle);
		Object loadedAE=SqlClientContainer.sql.queryForObject("aePeerBySCP",
		      scpAETitle);
		if(loadedAE==null)
		{
			SqlClientContainer.sql.insert("insertAEPeer",ae);
		}
		else
		{
			SqlClientContainer.sql.update("persistAEPeer",ae);
		}
	}



	/**
	 * Saves or updates Xebra Study with the given parameters
	 * 
	 * @throws PersistException
	 *            see Xebra source
	 * @throws SQLException
	 *            When sentence 'studySearchByUID' or 'persistStudy' in Study.xml
	 *            configuration file fails.
	 */
	public void saveStudy(String uid,String aeTitle,Date imagesCachedDate)
	      throws PersistException,SQLException
	{
		com.hxti.edge.pacs.data.Study s=new com.hxti.edge.pacs.data.Study(uid);
		s.setAeTitle(aeTitle);
		s.setImagesCachedDate(imagesCachedDate);
		Object loadedStudy=SqlClientContainer.sql.queryForObject(
		      "studySearchByUID",uid);
		if(loadedStudy==null)
		{
			LoaderFactory.getPersister(com.hxti.edge.pacs.data.Study.class)
			      .persist(s);
		}
		else
		{
			SqlClientContainer.sql.update("persistStudy",s);
		}
	}



	/**
	 * Saves or updates Xebra Series with the given parameters
	 * 
	 * @throws PersistException
	 *            see Xebra source
	 * @throws SQLException
	 *            When sentence 'seriesSearchByUID' or 'persistSeries' in
	 *            Study.xml configuration file fails.
	 */
	public void saveSeries(String uid,String studyuid) throws PersistException,
	      SQLException
	{
		com.hxti.edge.pacs.data.Series s=new com.hxti.edge.pacs.data.Series(uid);
		s.setStudyUid(studyuid);
		Object loadedSeries=SqlClientContainer.sql.queryForObject(
		      "seriesSearchByUID",uid);
		if(loadedSeries==null)
		{
			LoaderFactory.getPersister(com.hxti.edge.pacs.data.Series.class)
			      .persist(s);
		}
		else
		{
			SqlClientContainer.sql.update("persistSeries",s);
		}
	}



	/**
	 * Saves or updates Xebra Instance with the given parameters
	 * 
	 * @throws PersistException
	 *            see Xebra source
	 * @throws SQLException
	 *            When sentence 'intanceSearchByUID' or 'persistInstance' in
	 *            Study.xml configuration file fails.
	 */
	public void saveInstance(String uid,String seriesuid,String imageFileLocation)
	      throws PersistException,SQLException
	{
		com.hxti.edge.pacs.data.Instance i=new com.hxti.edge.pacs.data.Instance(
		      uid);
		i.setSeriesInstanceUid(seriesuid);
		i.setImageFileLocation(imageFileLocation);
		Object loadedInstance=SqlClientContainer.sql.queryForObject(
		      "instanceSearchByUID",uid);
		if(loadedInstance==null)
		{
			LoaderFactory.getPersister(com.hxti.edge.pacs.data.Instance.class)
			      .persist(i);
		}
		else
		{
			SqlClientContainer.sql.update("persistInstance",i);
		}
	}

}
